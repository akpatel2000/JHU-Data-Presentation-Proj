TreasuryCurvePresentation
========================================================
author: A.K. Patel
date: 8/10/2017
autosize: true

Treasury Yield Curve App
========================================================
The Treasury Curve App allows you to check two historical US Treasury yield curves.

- __Source Data__ -- US St. Louis Federal Reserve
- __Data Sets__ -- Input data includes historical data for US Treasury 2y, 5y, 7y, 10y and 30y bonds.
- __Computation method__ -- the yield is computed using the 5 available data set to construct a yield curve by calling spline function, using a simplistic "natural" method for curve construction.
- __Data History__ -- to limit space and computation requirement, data set is limited to 2012-08-06 to 2017-08-04

What is a Yield Curve
========================================================
A yield curve is a plot of maturity (x-axis) and yield (y-axis).  The resulting plot allows you to determine what a US Treasury bond would yield for all computed maturities.

Generally trade data is only available for actively traded maturities like the __2y, 5y, 7y, 10y and 30y__.

In order to construct a yield curve we use the trade data from actively traded securities to compute a theoretical yield for the maturities we don't observe.

Our yield curve is constructed from 1 to 30 year.  Though we don't have data on what a 14 year US Treasury bond would yield, we can compute the theoretical yield using a __spline()__ function.

```{r, echo=FALSE}
library(ggplot2)
library(shiny)
library(lubridate)

    ## Load Treasury data
    year2Y <- read.csv("https://raw.githubusercontent.com/akpatel2000/Projects/master/DGS2.csv", header = TRUE, stringsAsFactors = FALSE)
    year5Y <- read.csv("https://raw.githubusercontent.com/akpatel2000/Projects/master/DGS5.csv", header = TRUE, stringsAsFactors = FALSE)
    year7Y <- read.csv("https://raw.githubusercontent.com/akpatel2000/Projects/master/DGS7.csv", header = TRUE, stringsAsFactors = FALSE)
    year10Y <- read.csv("https://raw.githubusercontent.com/akpatel2000/Projects/master/DGS10-2.csv", header = TRUE, stringsAsFactors = FALSE)
    year30Y <- read.csv("https://raw.githubusercontent.com/akpatel2000/Projects/master/DGS30.csv", header = TRUE, stringsAsFactors = FALSE)

    ## Format data to remove errors and incomplete data
    year2Y <- year2Y[-which(year2Y$DGS2=="."),]
    year5Y <- year5Y[-which(year5Y$DGS5=="."),]
    year7Y <- year7Y[-which(year7Y$DGS7=="."),]
    year10Y <- year10Y[-which(year10Y$DGS10=="."),]
    year30Y <- year30Y[-which(year30Y$DGS30=="."),]

    ## Merge datasets into one dataframe
    ratesRecord <- merge(year2Y, year5Y, by = "DATE")
    ratesRecord <- merge(ratesRecord, year7Y, by = "DATE")
    ratesRecord <- merge(ratesRecord, year10Y, by = "DATE")
    ratesRecord <- merge(ratesRecord, year30Y, by = "DATE")

    ## Format data to proper data types
    ratesRecord$DATE <- as.Date(ratesRecord$DATE)
    ratesRecord$DGS2 <- as.numeric(ratesRecord$DGS2)
    ratesRecord$DGS5 <- as.numeric(ratesRecord$DGS5)
    ratesRecord$DGS7 <- as.numeric(ratesRecord$DGS7)
    ratesRecord$DGS10 <- as.numeric(ratesRecord$DGS10)
    ratesRecord$DGS30 <- as.numeric(ratesRecord$DGS30)
    
    muniCurve <- spline(c(2,5,7,10,30),
                c(ratesRecord$DGS2[1], 
                  ratesRecord$DGS5[1],
                  ratesRecord$DGS7[1], 
                  ratesRecord$DGS10[1],
                  ratesRecord$DGS30[1]), 
                  n=30, method = "natural")
```

Example of What a Yield Curve Looks Like
========================================================
```{r, echo=FALSE}
plot(muniCurve, xlab = "Maturity", ylab = "Yield")
```

How to use the app
========================================================
Compare yield curve from two historical dates

1. Select a date from the calendar for Yield Curve 1
2. Select the number of days from the slider to determine how many days to back when constructing Yield Curve 2.

<small>_The input datasets from the Federal Reserve are sitting in my Github account.  Hence it may take a few seconds to render the plot depending on internet speed._<small>
